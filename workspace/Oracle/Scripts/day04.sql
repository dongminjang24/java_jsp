CREATE SEQUENCE SEQ_STUDENT;



INSERT INTO TBL_STUDENT
(STUDENT_NUMBER, STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR,STUDENT_GENDER , STUDENT_BIRTH)
VALUES(SEQ_STUDENT.NEXTVAL,'hgd','홍길동', '컴퓨터공학과','M','2001-05-05');

SELECT * FROM TBL_STUDENT;

/*한동석의 성별을 M으로 변*/
UPDATE TBL_STUDENT
SET STUDENT_GENDER='M' WHERE STUDENT_NAME ='한동석';



INSERT INTO TBL_STUDENT
(STUDENT_NUMBER, STUDENT_ID, STUDENT_NAME, STUDENT_MAJOR,STUDENT_GENDER , STUDENT_BIRTH)
VALUES(SEQ_STUDENT.NEXTVAL,'hgd','홍길동', '컴퓨터공학과','M','2001-05-05');

/*만약 문자열 타입이 DATE타입으로 자동 변환이 되지 않는다면, 기본 서식을 변경한다.*/
SELECT SYS_CONTEXT('USERENV','NLS_DATE_FORMAT') NDF FROM DUAL;
ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD';

/*무조건 pk값을 이용하여 변경해주기 */
UPDATE TBL_STUDENT 
SET STUDENT_GENDER = 'M'
WHERE STUDENT_NUMBER =1;

SELECT * FROM TBL_FLOWER;

SELECT * FROM TBL_POT;

INSERT INTO TBL_FLOWER (FLOWER_NAME,FLOWER_COLOR,FLOWER_PRICE,FLOWER_EXPIRY_DATE,FLOWER_STOCK,FLOWER_SALE)
VALUES('장미','흰색',7000,SYSDATE + 5,10,0);

CREATE SEQUENCE SEQ_POT;



INSERT INTO TBL_POT
(POT_NUMBER, POT_COLOR, POT_SHAPE, POT_PRICE, POT_STOCK, FLOWER_NAME, FLOWER_COLOR)
VALUES(SEQ_POT.NEXTVAL, '파란색', '직사각형', 23000, 5, '장미','흰색');

/*자식에서 참조중인 데이터는 부모에서 수정이 불가능하다. 
 * 이럴경우 자식에서 참조중인 데이터를 NULL로 변경시키고 부모의 데이터를 
 *수정한뒤 자식의 데이터를 수정한다.
 * */
UPDATE TBL_FLOWER SET FLOWER_NAME = '안개꽃'
WHERE FLOWER_NAME ='장미' AND FLOWER_COLOR ='흰색';

UPDATE TBL_POT SET FLOWER_NAME = '안개꽃'
WHERE POT_NUMBER = 4;

/*자식의 FK를 변경할 때에는 부모에 존재하는 값으로 변경해야하고,
 * 만약 부모에 없는 값으로 변경해야할 때에는 부모에 먼저 INSERT를 진행한 뒤
 * 자식 FK를 수정하도록 한다.
 * */

INSERT INTO TBL_FLOWER VALUES ('장미','흰색',7500,Sysdate + 7 ,5,0);

UPDATE TBL_FLOWER SET FLOWER_NAME = '안개꽃'
WHERE FLOWER_NAME ='장미' AND FLOWER_COLOR ='흰색';

UPDATE TBL_POT SET FLOWER_NAME = '장미'
WHERE POT_NUMBER = 4;


DELETE FROM TBL_POT WHERE (FLOWER_NAME ='해바라기' AND FLOWER_COLOR='노란색');

DELETE FROM TBL_FLOWER WHERE (FLOWER_NAME ='해바라기' AND FLOWER_COLOR='노란색');

/*
 * 	삭제 시 참조중인 자식 FK가 있으면, 자식부터 지워야 한다.
 *  하지만 이러한 번거로운 작업을 해결하기 위해 FK 제약 조건 뒤에 ON DELETE CASCADE옵션을 작성할 수 있다.
 * 해당 옵션이 추가되면, 부모 삭제 시 참조중인 모든 자식 데이터가 자동으로 삭제된다.
 * */
ALTER TABLE tbl_pot DROP CONSTRAINT fk_pot;
ALTER TABLE tbl_pot ADD CONSTRAINT fk_pot FOREIGN KEY (flower_name,flower_color)
REFERENCES tbl_flower(flower_name,flower_color) ON DELETE CASCADE;

/*
 * TBL_OWNER,TBL_PET
 * 보호자 정보 추가
 * 반려동물 정보 추가
 * 보호자 이름 수정
 * 반려동물의 보호자 번호 수정
 * 보호자 삭제
 * 보호자가 없는 반려동물 추
 * */

SELECT * FROM TBL_OWNER;
SELECT * FROM TBL_PET;

INSERT INTO TBL_OWNER values('01057862039','장동민',27,'상도동 464-9');
DELETE FROM TBL_OWNER WHERE OWNER_NAME ='장동민';

ALTER TABLE	TBL_OWNER MODIFY(OWNER_PHONE_NUMBER VARCHAR2(1000));
ALTER TABLE TBL_PET DROP CONSTRAINT FK_PET;

ALTER TABLE	TBL_PET MODIFY(OWNER_PHONE_NUMBER VARCHAR2(1000));
ALTER TABLE	TBL_OWNER MODIFY(OWNER_PHONE_NUMBER VARCHAR2(1000));
ALTER TABLE TBL_PET ADD CONSTRAINT fk_pet FOREIGN KEY (OWNER_PHONE_NUMBER)
REFERENCES TBL_OWNER(OWNER_PHONE_NUMBER) ON DELETE CASCADE;

INSERT INTO ADMIN.TBL_OWNER
(OWNER_PHONE_NUMBER, OWNER_NAME, OWNER_AGE, OWNER_ADDRESS)
VALUES('01057862039', '장동민', 27, '상도동 464-9');

CREATE SEQUENCE PET_SEQ;
INSERT INTO ADMIN.TBL_PET
(PET_PINNUMBER, PET_KIND, PET_NAME, PET_AGE, PET_DISEASE_NAME, OWNER_PHONE_NUMBER)
VALUES(PET_SEQ.NEXTVAL, '시바', '코코', 1,NULL, '01057862039');




UPDATE ADMIN.TBL_OWNER
SET OWNER_NAME='장동화'
WHERE OWNER_PHONE_NUMBER='01057862039';
DELETE FROM TBL_OWNER WHERE (OWNER_PHONE_NUMBER='01057862039');


INSERT INTO ADMIN.TBL_OWNER
(OWNER_PHONE_NUMBER, OWNER_NAME, OWNER_AGE, OWNER_ADDRESS)
VALUES('01092162039', '장동화', 27, '상도동 464-9');

UPDATE ADMIN.TBL_PET
SET OWNER_PHONE_NUMBER='01092162039'
WHERE OWNER_PHONE_NUMBER='01057862039';

INSERT INTO ADMIN.TBL_PET
(PET_PINNUMBER, PET_KIND, PET_NAME, PET_AGE, PET_DISEASE_NAME, OWNER_PHONE_NUMBER)
VALUES(PET_SEQ.NEXTVAL, '웰시코가', '짱구', 5,NULL, NULL);

ALTER TABLE TBL_PET DROP CONSTRAINT fk_pet;
ALTER TABLE TBL_PET ADD CONSTRAINT fk_pet FOREIGN KEY (OWNER_PHONE_NUMBER)
REFERENCES TBL_OWNER(OWNER_PHONE_NUMBER) ON DELETE CASCADE;

DELETE FROM TBL_OWNER WHERE (OWNER_PHONE_NUMBER='01092162039');


SELECT * FROM PLAYER WHERE (WEIGHT >= 70 AND WEIGHT<=80);
SELECT * FROM PLAYER WHERE WEIGHT BETWEEN 70 AND 80;

SELECT * FROM PLAYER WHERE (TEAM_ID = 'K03' AND HEIGHT <180);

SELECT * FROM PLAYER WHERE (TEAM_ID = 'K06' AND NICKNAME = '제리');

SELECT * FROM PLAYER WHERE (WEIGHT >= 80 AND HEIGHT>=170);

SELECT * FROM STADIUM WHERE (SEAT_COUNT > 30000 AND SEAT_COUNT <= 41000);


SELECT * FROM PLAYER WHERE ((TEAM_ID = 'K07' OR TEAM_ID = 'K02') AND "POSITION" = 'MF');


SELECT * FROM PLAYER WHERE (TEAM_ID IN ('k02','k07') AND "POSITION" = 'MF');



















