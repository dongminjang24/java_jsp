/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.79
 * Generated at: 2023-09-21 15:14:35 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.app.user;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signUp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>코코마켓 회원가입</title>\n");
      out.write("</head>\n");
      out.write("<style>\n");
      out.write("\n");
      out.write("    *, *:before, *:after { /* 모든 요소에 box-sizing 적용 */\n");
      out.write("        box-sizing: border-box;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    html, body {\n");
      out.write("        padding: 0;\n");
      out.write("        margin: 0;\n");
      out.write("        height: 100%;\n");
      out.write("        width: 100%;\n");
      out.write("        font-family: 'Noto Sans KR', sans-serif;\n");
      out.write("        \n");
      out.write("    }\n");
      out.write("\n");
      out.write("  \n");
      out.write("\n");
      out.write("    .bg-coco {\n");
      out.write("        background-color: #f1cea3;\n");
      out.write("        height: 100%;\n");
      out.write("        width: 100%;\n");
      out.write("        display:flex;\n");
      out.write("        justify-content:center;\n");
      out.write("        align-items:center;\n");
      out.write("    }\n");
      out.write("\n");
      out.write("    .right-bottom {\n");
      out.write("        text-align: right;\n");
      out.write("        vertical-align: bottom;\n");
      out.write("        font-size: 80px;\n");
      out.write("    }\n");
      out.write("    .sign-up-form{\n");
      out.write("    	background-color:white;\n");
      out.write("    	border-radius:8px;\n");
      out.write("    	width:480px;\n");
      out.write("    	height:640px;\n");
      out.write("        justify-content:center;\n");
      out.write("        align-items:center;\n");
      out.write("        display:flex;\n");
      out.write("        \n");
      out.write("    }\n");
      out.write("    .sign-up-input{\n");
      out.write("	width:100%;\n");
      out.write("	border-radius:8px;\n");
      out.write("	border:1px solid #A9A9A9;\n");
      out.write("	height:36px;\n");
      out.write("	font-size:16px;\n");
      out.write("	\n");
      out.write("	}\n");
      out.write("	.input-label{\n");
      out.write("		margin-top:20px;\n");
      out.write("		color:black;\n");
      out.write("		font-size:16px;\n");
      out.write("		display:block;\n");
      out.write("		margin-bottom:4px;\n");
      out.write("	}\n");
      out.write(".div-form-container{\n");
      out.write("	width:80%\n");
      out.write("}\n");
      out.write(".sign-up-btn{\n");
      out.write("	text-align:center;\n");
      out.write("	margin:0 auto;\n");
      out.write("	width:100%;\n");
      out.write("	border:none;\n");
      out.write("	border-radius:8px;\n");
      out.write("	height:56px;\n");
      out.write("	color:white;\n");
      out.write("	font-size:16px;\n");
      out.write("	background-color:#c69966;\n");
      out.write("	margin-top:15px;\n");
      out.write("	cursor:pointer;\n");
      out.write("	\n");
      out.write("}\n");
      out.write(".address-input{\n");
      out.write("	height:36px;\n");
      out.write("	border-radius:8px;\n");
      out.write("	border:1px solid #A9A9A9;\n");
      out.write("	width:80%;\n");
      out.write("	margin-bottom:20px;\n");
      out.write("		font-size:16px;\n");
      out.write("	\n");
      out.write("}\n");
      out.write(".address-btn{\n");
      out.write("	margin-left:8px;\n");
      out.write("	height:40px;\n");
      out.write("	width:60px;\n");
      out.write("	background-color:#d0ac7f;\n");
      out.write("	border:none;\n");
      out.write("	border-radius:8px;\n");
      out.write("	color:white;\n");
      out.write("}\n");
      out.write(".div-site-title-bottom{\n");
      out.write("	display:flex;\n");
      out.write("	justify-content:center;\n");
      out.write("	align-items:flex-end;\n");
      out.write("}\n");
      out.write(".title-text{\n");
      out.write("	margin-left:30px;\n");
      out.write("	margin-bottom:0;\n");
      out.write("	vertical-align: bottom;\n");
      out.write("	line-height:100%;\n");
      out.write("	height:30px;\n");
      out.write("	color:white;\n");
      out.write("	font-size:24px;\n");
      out.write("}\n");
      out.write("</style>\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<body>\n");
      out.write("<div class=\"bg-coco\">\n");
      out.write("\n");
      out.write("<div style=\"display:flex\">\n");
      out.write("\n");
      out.write("	<form method=\"post\"  class=\"sign-up-form\"  action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/signUpOk.usr\" name=\"signUpForm\">\n");
      out.write("		<div class=\"div-form-container\">\n");
      out.write("			<label class=\"input-label\">이메일</label>\n");
      out.write("			<input id=\"userEmail\"  name=\"userEmail\" class=\"sign-up-input\"></input>\n");
      out.write("			<span id=\"email_check\" style=\"font-size:0.7em;\"></span>\n");
      out.write("		\n");
      out.write("			<label class=\"input-label\">비밀번호</label>\n");
      out.write("			<input type=\"password\" id=\"userPassword\" name=\"userPassword\" class=\"sign-up-input\"></input>\n");
      out.write("			<span id=\"password_check\" style=\"font-size:0.7em;\"></span>\n");
      out.write("\n");
      out.write("\n");
      out.write("			<label class=\"input-label\">비밀번호 확인</label>\n");
      out.write("			<input type=\"password\" id=\"userPasswordConfirm\" class=\"sign-up-input\"></input>\n");
      out.write("			<span id=\"password_confirm_check\" style=\"font-size:0.7em;\"></span>\n");
      out.write("\n");
      out.write("			<label class=\"input-label\">닉네임</label>\n");
      out.write("			<input name=\"userNickname\" class=\"sign-up-input\"></input>\n");
      out.write("			<label class=\"input-label\">주소지</label>\n");
      out.write("			<input name=\"userAddress\"  type=\"text\" id=\"address\" placeholder=\"도로명주소\" class=\"address-input\" ></input>\n");
      out.write("			<input type=\"button\" onclick=\"findAddress()\"  class=\"address-btn\" value=\"찾기\"><br>\n");
      out.write("			<label class=\"input-label\">연락처</label>\n");
      out.write("			<input name=\"userPhoneNumber\" class=\"sign-up-input\"></input>\n");
      out.write("		\n");
      out.write("		<div style=\"width:100%\">\n");
      out.write("			<button type=\"submit\" class=\"sign-up-btn\">회원가입</button>\n");
      out.write("		</div>\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("	</form>\n");
      out.write("	<div class=\"div-site-title-bottom\">\n");
      out.write("		<p class=\"title-text\">코코마켓</p>\n");
      out.write("	</div>\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("<script src=\"https://code.jquery.com/jquery-latest.min.js\"></script>\n");
      out.write("\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\n");
      out.write("<script>\n");
      out.write("    //본 예제에서는 도로명 주소 표기 방식에 대한 법령에 따라, 내려오는 데이터를 조합하여 올바른 주소를 구성하는 방법을 설명합니다.\n");
      out.write("    function findAddress() {\n");
      out.write("        new daum.Postcode({\n");
      out.write("            oncomplete: function(data) {\n");
      out.write("        \n");
      out.write("                let roadAddr = data.roadAddress; // 도로명 주소 변수\n");
      out.write("                let extraRoadAddr = ''; // 참고 항목 변수\n");
      out.write("\n");
      out.write("              \n");
      out.write("                if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\n");
      out.write("                    extraRoadAddr += data.bname;\n");
      out.write("                }\n");
      out.write("                // 건물명이 있고, 공동주택일 경우 추가한다.\n");
      out.write("                if(data.buildingName !== '' && data.apartment === 'Y'){\n");
      out.write("                   extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\n");
      out.write("                }\n");
      out.write("                // 표시할 참고항목이 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\n");
      out.write("                if(extraRoadAddr !== ''){\n");
      out.write("                    extraRoadAddr = ' (' + extraRoadAddr + ')';\n");
      out.write("                }\n");
      out.write("\n");
      out.write("                // 우편번호와 주소 정보를 해당 필드에 넣는다.\n");
      out.write("                document.getElementById(\"address\").value = roadAddr;\n");
      out.write("                \n");
      out.write("            }\n");
      out.write("        }).open();\n");
      out.write("    }\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("<script>\n");
      out.write("$('.sign-up-btn').prop('disabled', true);\n");
      out.write("$('.sign-up-btn').css(\"backgroundColor\",\"#D9D9D9\");\n");
      out.write("\n");
      out.write("let check = false;\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("$(\"#userPassword\").on(\"blur\", () => {\n");
      out.write("    const passwordVal = $(\"#userPassword\").val();\n");
      out.write("\n");
      out.write("    if (passwordVal.search(/[0-9]/g) === -1 || passwordVal.search(/[a-z]/ig) === -1 || passwordVal.length < 8) {\n");
      out.write("		$(\"#password_check\").css(\"color\",\"red\");\n");
      out.write("        $(\"#password_check\").text(\"비밀번호가 형식에 맞지 않습니다.\");\n");
      out.write("    } else {\n");
      out.write("        $(\"#password_check\").text(\"\");\n");
      out.write("    }\n");
      out.write("    const passwordConfirmVal = $(\"#userPasswordConfirm\").val();\n");
      out.write("\n");
      out.write("    if (passwordVal!=passwordConfirmVal) {\n");
      out.write("		$(\"#password_confirm_check\").css(\"color\",\"red\");\n");
      out.write("        $(\"#password_confirm_check\").text(\"비밀번호가 일치하지 않습니다.\");\n");
      out.write("    } else {\n");
      out.write("        $(\"#password_confirm_check\").text(\"\");\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("$(\"#userPasswordConfirm\").on(\"blur\", () => {\n");
      out.write("    const passwordVal = $(\"#userPassword\").val();\n");
      out.write("    const passwordConfirmVal = $(\"#userPasswordConfirm\").val();\n");
      out.write("\n");
      out.write("    if (passwordVal!=passwordConfirmVal) {\n");
      out.write("		$(\"#password_confirm_check\").css(\"color\",\"red\");\n");
      out.write("        $(\"#password_confirm_check\").text(\"비밀번호가 일치하지 않습니다.\");\n");
      out.write("    } else {\n");
      out.write("        $(\"#password_confirm_check\").text(\"\");\n");
      out.write("    }\n");
      out.write("});\n");
      out.write("\n");
      out.write("\n");
      out.write("$(\"#userEmail\").on(\"blur\",function(){checkEmail($(this).val());});\n");
      out.write("\n");
      out.write("\n");
      out.write("function checkEmail(userEmail){\n");
      out.write("	check= false;\n");
      out.write("	if(!userEmail){\n");
      out.write("		$(\"#email_check\").css(\"color\",\"red\");\n");
      out.write("		$(\"#email_check\").text(\"아이디를 확인해주세요.\");\n");
      out.write("		return;\n");
      out.write("	}\n");
      out.write("	$.ajax({\n");
      out.write("		url: \"/checkEmail.usr\",\n");
      out.write("		data:{\"userEmail\": userEmail},\n");
      out.write("		success:function(result){\n");
      out.write("			if(result == \"true\"){\n");
      out.write("				$(\"#email_check\").text(\"사용 가능\");\n");
      out.write("				$(\"#email_check\").css(\"color\",\"blue\");\n");
      out.write("				check = true;\n");
      out.write("			}else{\n");
      out.write("				$(\"#email_check\").text(\"중복된 아이디입니다.\");\n");
      out.write("				$(\"#email_check\").css(\"color\",\"red\");\n");
      out.write("			}\n");
      out.write("		},\n");
      out.write("		error:function(){\n");
      out.write("			console.log(\"오류\");\n");
      out.write("		}\n");
      out.write("	});\n");
      out.write("}\n");
      out.write("function checkAllFields() {\n");
      out.write("    // 각 필드의 유효성 검사\n");
      out.write("    let isEmailValid = check && $(\"#email_check\").text() === \"사용 가능\";\n");
      out.write("    let isPasswordValid = $(\"#password_check\").text() === \"\";\n");
      out.write("    let isPasswordConfirmValid = $(\"#password_confirm_check\").text() === \"\";\n");
      out.write("    let isUserEmailFilled = $(\"#userEmail\").val() !== \"\";\n");
      out.write("    let isUserPasswordFilled = $(\"#userPassword\").val() !== \"\";\n");
      out.write("    let isUserPasswordConfirmFilled = $(\"#userPasswordConfirm\").val() !== \"\";\n");
      out.write("    let isUserNicknameFilled = $(\"input[name='userNickname']\").val() !== \"\";\n");
      out.write("    let isUserAddressFilled = $(\"#address\").val() !== \"\";\n");
      out.write("    let isUserPhoneNumberFilled = $(\"input[name='userPhoneNumber']\").val() !== \"\";\n");
      out.write("    \n");
      out.write("    if (isEmailValid && \n");
      out.write("        isPasswordValid && \n");
      out.write("        isPasswordConfirmValid && \n");
      out.write("        isUserEmailFilled && \n");
      out.write("        isUserPasswordFilled && \n");
      out.write("        isUserPasswordConfirmFilled && \n");
      out.write("        isUserNicknameFilled && \n");
      out.write("        isUserAddressFilled && \n");
      out.write("        isUserPhoneNumberFilled) {\n");
      out.write("        $('.sign-up-btn').prop('disabled', false);\n");
      out.write("        $('.sign-up-btn').css(\"backgroundColor\",\"#c69966\");\n");
      out.write("\n");
      out.write("    } else {\n");
      out.write("        $('.sign-up-btn').prop('disabled', true);\n");
      out.write("\n");
      out.write("    }\n");
      out.write("}\n");
      out.write("$('input').on('blur', checkAllFields);\n");
      out.write("\n");
      out.write("</script>\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
